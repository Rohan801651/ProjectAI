using ProjectAI.Models; // Your namespace for models
using Microsoft.AspNetCore.Mvc;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Json; // Requires System.Net.Http.Json NuGet package
using System.Text.Json;
using System.Threading.Tasks;

namespace ProjectAI.Controllers
{
    public class ChatController : Controller
    {
        private readonly IHttpClientFactory _httpClientFactory;
        private const string ExternalApiUrl = "https://api.a0.dev/ai/llm"; // As per HomeScreen.tsx
        private const string SystemPrompt = "You are a helpful English tutor. Help the user practice English conversation. Correct any grammar or vocabulary mistakes politely. Keep responses friendly and engaging. Encourage the user to speak more.";

        public ChatController(IHttpClientFactory httpClientFactory)
        {
            _httpClientFactory = httpClientFactory;
        }

        // GET: /Chat or /Chat/Index
        public IActionResult Index()
        {
            var initialMessage = new ChatMessage
            {
                Id = "1", // Matches the initial ID from HomeScreen.tsx
                Role = "assistant",
                Content = "Hello! I'm your English conversation partner. I'll help you practice and improve your English. Feel free to talk about any topic you'd like!"
            };
            var viewModel = new InitialChatViewModel(initialMessage);
            return View(viewModel); // Pass the initial message to the Razor view
        }

        // POST: /Chat/SendMessage
        [HttpPost]
        public async Task<IActionResult> SendMessage([FromBody] ConversationPayload payload)
        {
            if (payload == null || string.IsNullOrWhiteSpace(payload.NewUserMessageContent))
            {
                return BadRequest(new { message = "Invalid payload or empty message content." });
            }

            // Construct the messages list for the external API
            var messagesForApi = new List<ApiMessage>
            {
                new ApiMessage { Role = "system", Content = SystemPrompt }
            };

            // Add history messages (if any) from the client
            if (payload.HistoryMessages != null)
            {
                messagesForApi.AddRange(payload.HistoryMessages.Select(m => new ApiMessage { Role = m.Role, Content = m.Content }));
            }

            // Add the new user message
            messagesForApi.Add(new ApiMessage { Role = "user", Content = payload.NewUserMessageContent });

            var apiRequest = new ExternalApiRequest { Messages = messagesForApi };

            try
            {
                var httpClient = _httpClientFactory.CreateClient();
                // Note: Consider adding an API key or Authorization header if required by api.a0.dev
                // httpClient.DefaultRequestHeaders.Authorization = new System.Net.Http.Headers.AuthenticationHeaderValue("Bearer", "YOUR_API_KEY");

                HttpResponseMessage response = await httpClient.PostAsJsonAsync(ExternalApiUrl, apiRequest);

                if (response.IsSuccessStatusCode)
                {
                    var apiResponse = await response.Content.ReadFromJsonAsync<ExternalApiResponse>();
                    if (apiResponse != null && !string.IsNullOrEmpty(apiResponse.Completion))
                    {
                        var aiMessage = new ChatMessage
                        {
                            Role = "assistant",
                            Content = apiResponse.Completion
                            // ID will be generated by the ChatMessage constructor or can be set here
                        };
                        return Ok(aiMessage); // Send the AI's response back to the client
                    }
                    else
                    {
                        // Log error: AI response format unexpected or completion is null/empty
                        Console.WriteLine($"Error: AI response format unexpected or completion is null/empty. Status: {response.StatusCode}");
                        return StatusCode(500, new { message = "AI response format was unexpected." });
                    }
                }
                else
                {
                    // Log error: External API call failed
                    var errorContent = await response.Content.ReadAsStringAsync();
                    Console.WriteLine($"Error calling external AI API: {response.StatusCode} - {errorContent}");
                    return StatusCode((int)response.StatusCode, new { message = "Error communicating with AI service.", details = errorContent });
                }
            }
            catch (HttpRequestException ex)
            {
                // Log network-related errors
                Console.WriteLine($"HttpRequestException in SendMessage: {ex.Message}");
                return StatusCode(503, new { message = "AI service is unavailable.", details = ex.Message }); // Service Unavailable
            }
            catch (JsonException ex)
            {
                // Log errors related to JSON serialization/deserialization
                Console.WriteLine($"JsonException in SendMessage: {ex.Message}");
                return StatusCode(500, new { message = "Error processing AI response.", details = ex.Message });
            }
            catch (Exception ex)
            {
                // Log any other unexpected errors
                Console.WriteLine($"Unexpected exception in SendMessage: {ex.Message}");
                return StatusCode(500, new { message = "An unexpected error occurred.", details = ex.Message });
            }
        }
    }
}